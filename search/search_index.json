{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>thutil</code> Documentation","text":""},{"location":"#thutil","title":"<code>thutil</code>","text":"<p>The package for general ulitities.</p> <p>Developed and maintained by C.Thang Nguyen</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#thutil","title":"<code>thutil</code>","text":"<p>The package for general ulitities.</p> <p>Developed and maintained by C.Thang Nguyen</p> <p>Modules:</p> <ul> <li> <code>config</code>           \u2013            </li> <li> <code>io</code>           \u2013            </li> <li> <code>path</code>           \u2013            </li> <li> <code>pkg</code>           \u2013            </li> <li> <code>sth2sth</code>           \u2013            </li> <li> <code>stuff</code>           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>__description__</code>           \u2013            </li> <li> <code>__long_description__</code>           \u2013            </li> <li> <code>__author__</code>           \u2013            </li> </ul>"},{"location":"api/#thutil.__description__","title":"<code>__description__ = 'Python package'</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.__long_description__","title":"<code>__long_description__ = 'ML based applications '</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.__author__","title":"<code>__author__ = 'thangckt'</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.__version","title":"<code>__version</code>","text":"<p>Attributes:</p> <ul> <li> <code>TYPE_CHECKING</code>           \u2013            </li> <li> <code>VERSION_TUPLE</code>           \u2013            </li> <li> <code>version</code>               (<code>str</code>)           \u2013            </li> <li> <code>__version__</code>               (<code>str</code>)           \u2013            </li> <li> <code>__version_tuple__</code>               (<code>VERSION_TUPLE</code>)           \u2013            </li> <li> <code>version_tuple</code>               (<code>VERSION_TUPLE</code>)           \u2013            </li> </ul>"},{"location":"api/#thutil.__version.TYPE_CHECKING","title":"<code>TYPE_CHECKING = False</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.__version.VERSION_TUPLE","title":"<code>VERSION_TUPLE = Tuple[Union[int, str], ...]</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.__version.version","title":"<code>version: str = '0.1.dev150+gb76f61a.d20241231'</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.__version.__version__","title":"<code>__version__: str = '0.1.dev150+gb76f61a.d20241231'</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.__version.__version_tuple__","title":"<code>__version_tuple__: VERSION_TUPLE = (0, 1, 'dev150', 'gb76f61a.d20241231')</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.__version.version_tuple","title":"<code>version_tuple: VERSION_TUPLE = (0, 1, 'dev150', 'gb76f61a.d20241231')</code>  <code>module-attribute</code>","text":""},{"location":"api/#thutil.config","title":"<code>config</code>","text":"<p>Functions:</p> <ul> <li> <code>validate_config</code>             \u2013              <p>Validate the config file with the schema file.</p> </li> <li> <code>load_setting_file</code>             \u2013              <p>Load data from a JSON or YAML file.</p> </li> <li> <code>load_jsonc</code>             \u2013              <p>Load data from a JSON file that allow comments.</p> </li> <li> <code>unpack_dict</code>             \u2013              <p>Unpack one level of nested dictionary.</p> </li> <li> <code>write_yaml</code>             \u2013              <p>Write data to a YAML file.</p> </li> <li> <code>read_yaml</code>             \u2013              <p>Read data from a YAML file.</p> </li> </ul>"},{"location":"api/#thutil.config.validate_config","title":"<code>validate_config(config_dict=None, config_file=None, schema_dict=None, schema_file=None, allow_unknown=False, require_all=False)</code>","text":"<p>Validate the config file with the schema file.</p> <p>Parameters:</p> <ul> <li> <code>config_dict</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>config dictionary. Defaults to None.</p> </li> <li> <code>config_file</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>path to the YAML config file, will override <code>config_dict</code>. Defaults to None.</p> </li> <li> <code>schema_dict</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>schema dictionary. Defaults to None.</p> </li> <li> <code>schema_file</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>path to the YAML schema file, will override <code>schema_dict</code>. Defaults to None.</p> </li> <li> <code>allow_unknown</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>whether to allow unknown fields in the config file. Defaults to False.</p> </li> <li> <code>require_all</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>whether to require all fields in the schema file to be present in the config file. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>if the config file does not match the schema</p> </li> </ul>"},{"location":"api/#thutil.config.load_setting_file","title":"<code>load_setting_file(filename: Union[str, Path]) -&gt; dict</code>","text":"<p>Load data from a JSON or YAML file.</p>"},{"location":"api/#thutil.config.load_setting_file--parameters","title":"Parameters","text":"<p>filename : str or os.PathLike     The filename to load data from, whose suffix should be .json, .yaml, or .yml</p>"},{"location":"api/#thutil.config.load_setting_file--returns","title":"Returns","text":"<p>dict     jdata: (dict) The data loaded from the file</p>"},{"location":"api/#thutil.config.load_setting_file--raises","title":"Raises","text":"<p>ValueError     If the file format is not supported</p>"},{"location":"api/#thutil.config.load_jsonc","title":"<code>load_jsonc(filename: str) -&gt; dict</code>","text":"<p>Load data from a JSON file that allow comments.</p>"},{"location":"api/#thutil.config.unpack_dict","title":"<code>unpack_dict(nested_dict: dict) -&gt; dict</code>","text":"<p>Unpack one level of nested dictionary.</p>"},{"location":"api/#thutil.config.write_yaml","title":"<code>write_yaml(jdata: dict, filename: Union[str, Path])</code>","text":"<p>Write data to a YAML file.</p>"},{"location":"api/#thutil.config.read_yaml","title":"<code>read_yaml(filename: Union[str, Path]) -&gt; dict</code>","text":"<p>Read data from a YAML file.</p>"},{"location":"api/#thutil.io","title":"<code>io</code>","text":"<p>Functions:</p> <ul> <li> <code>combine_text_files</code>             \u2013              <p>Combine text files into a single file in a memory-efficient. Read and write in chunks to avoid loading large files into memory</p> </li> <li> <code>download_rawtext</code>             \u2013              <p>Download raw text from a URL.</p> </li> </ul>"},{"location":"api/#thutil.io.combine_text_files","title":"<code>combine_text_files(files: list[str], output_file: str, chunk_size: int = 1024)</code>","text":"<p>Combine text files into a single file in a memory-efficient. Read and write in chunks to avoid loading large files into memory</p> <p>Parameters:</p> <ul> <li> <code>files</code>               (<code>list[str]</code>)           \u2013            <p>List of file paths to combine.</p> </li> <li> <code>output_file</code>               (<code>str</code>)           \u2013            <p>Path to the output file.</p> </li> <li> <code>chunk_size</code>               (<code>int</code>, default:                   <code>1024</code> )           \u2013            <p>Size of each chunk in KB to read/write. Defaults to 1024 KB.</p> </li> </ul>"},{"location":"api/#thutil.io.download_rawtext","title":"<code>download_rawtext(url: str, outfile: str = None) -&gt; str</code>","text":"<p>Download raw text from a URL.</p>"},{"location":"api/#thutil.path","title":"<code>path</code>","text":"<p>Functions:</p> <ul> <li> <code>make_dir</code>             \u2013              <p>Create a directory with a backup option.</p> </li> <li> <code>make_dir_ask_backup</code>             \u2013              <p>Make a directory and ask for backup if the directory already exists.</p> </li> <li> <code>ask_yes_no</code>             \u2013              <p>Asks a yes/no/backup question and returns the response.</p> </li> <li> <code>list_paths</code>             \u2013              <p>List all files/folders in given directories and their subdirectories that match the given patterns.</p> </li> <li> <code>collect_files</code>             \u2013              <p>Collect files from a list of paths (files/folders). Will search files in folders and their subdirectories.</p> </li> <li> <code>change_pathname</code>             \u2013              <p>change path names</p> </li> <li> <code>remove_files</code>             \u2013              <p>Remove files from a given list of file paths.</p> </li> <li> <code>remove_dirs</code>             \u2013              <p>Remove a list of directories.</p> </li> <li> <code>remove_files_in_paths</code>             \u2013              <p>Remove files in the <code>files</code> list in the <code>paths</code> list.</p> </li> <li> <code>remove_dirs_in_paths</code>             \u2013              <p>Remove directories in the <code>dirs</code> list in the <code>paths</code> list.</p> </li> <li> <code>copy_file</code>             \u2013              <p>Copy a file/folder from the source path to the destination path.</p> </li> <li> <code>move_file</code>             \u2013              <p>Move a file/folder from the source path to the destination path.</p> </li> <li> <code>scan_dirs</code>             \u2013              <p>Check if the folders contains and not contains some files.</p> </li> </ul>"},{"location":"api/#thutil.path.make_dir","title":"<code>make_dir(path: str, backup: bool = True)</code>","text":"<p>Create a directory with a backup option.</p>"},{"location":"api/#thutil.path.make_dir_ask_backup","title":"<code>make_dir_ask_backup(dir_path: str)</code>","text":"<p>Make a directory and ask for backup if the directory already exists.</p>"},{"location":"api/#thutil.path.ask_yes_no","title":"<code>ask_yes_no(question: str) -&gt; str</code>","text":"<p>Asks a yes/no/backup question and returns the response.</p>"},{"location":"api/#thutil.path.list_paths","title":"<code>list_paths(paths: list[str], patterns: list[str], recursive=True) -&gt; list[str]</code>","text":"<p>List all files/folders in given directories and their subdirectories that match the given patterns.</p>"},{"location":"api/#thutil.path.list_paths--parameters","title":"Parameters","text":"<p>paths : list[str]     The list of paths to search files/folders. patterns : list[str]     The list of patterns to apply to the files. Each filter can be a file extension or a pattern.</p>"},{"location":"api/#thutil.path.list_paths--returns","title":"Returns:","text":"<p>List[str]: A list of matching paths.</p>"},{"location":"api/#thutil.path.list_paths--example","title":"Example:","text":"<pre><code>folders = [\"path1\", \"path2\", \"path3\"]\npatterns = [\"*.ext1\", \"*.ext2\", \"something*.ext3\", \"*folder/\"]\nfiles = list_files_in_dirs(folders, patterns)\n</code></pre>"},{"location":"api/#thutil.path.list_paths--note","title":"Note:","text":"<ul> <li>glob() does not list hidden files by default. To include hidden files, use glob(\".*\", recursive=True).</li> <li>When use recursive=True, must include <code>**</code> in the pattern to search subdirectories.<ul> <li>glob(\"*\", recursive=True) will search all FILES &amp; FOLDERS in the CURRENT directory.</li> <li>glob(\"*/\", recursive=True) will search all FOLDERS in the current CURRENT directory.</li> <li>glob(\"**\", recursive=True) will search all FILES &amp; FOLDERS in the CURRENT &amp; SUB subdirectories.</li> <li>glob(\"**/\", recursive=True) will search all FOLDERS in the current CURRENT &amp; SUB subdirectories.</li> <li>\"/*\" is equivalent to \"\".</li> <li>\"/*/\" is equivalent to \"/\".</li> </ul> </li> <li>IMPORTANT: \"/\" will replicate the behavior of \"**\", then give unexpected results.</li> </ul>"},{"location":"api/#thutil.path.collect_files","title":"<code>collect_files(paths: list[str], patterns: list[str]) -&gt; list[str]</code>","text":"<p>Collect files from a list of paths (files/folders). Will search files in folders and their subdirectories.</p>"},{"location":"api/#thutil.path.collect_files--parameters","title":"Parameters","text":"<p>paths : list[str]     The list of paths to collect files from. patterns : list[str]     The list of patterns to apply to the files. Each filter can be a file extension or a pattern.</p>"},{"location":"api/#thutil.path.collect_files--returns","title":"Returns:","text":"<p>List[str]: A list of paths matching files.</p>"},{"location":"api/#thutil.path.change_pathname","title":"<code>change_pathname(paths: list[str], old_string: str, new_string: str, replace: bool = False) -&gt; None</code>","text":"<p>change path names</p> <p>Parameters:</p> <ul> <li> <code>paths</code>               (<code>list[str]</code>)           \u2013            <p>paths to the files/dirs</p> </li> <li> <code>old_string</code>               (<code>str</code>)           \u2013            <p>old string in path name</p> </li> <li> <code>new_string</code>               (<code>str</code>)           \u2013            <p>new string in path name</p> </li> <li> <code>replace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>replace the old path name if the new one exists. Defaults to False.</p> </li> </ul>"},{"location":"api/#thutil.path.remove_files","title":"<code>remove_files(files: list[str]) -&gt; None</code>","text":"<p>Remove files from a given list of file paths.</p> <p>Parameters:</p> <ul> <li> <code>files</code>               (<code>list[str]</code>)           \u2013            <p>list of file paths</p> </li> </ul>"},{"location":"api/#thutil.path.remove_dirs","title":"<code>remove_dirs(dirs: list[str]) -&gt; None</code>","text":"<p>Remove a list of directories.</p> <p>Parameters:</p> <ul> <li> <code>dirs</code>               (<code>list[str]</code>)           \u2013            <p>list of directories to remove.</p> </li> </ul>"},{"location":"api/#thutil.path.remove_files_in_paths","title":"<code>remove_files_in_paths(files: list, paths: list) -&gt; None</code>","text":"<p>Remove files in the <code>files</code> list in the <code>paths</code> list.</p>"},{"location":"api/#thutil.path.remove_dirs_in_paths","title":"<code>remove_dirs_in_paths(dirs: list, paths: list) -&gt; None</code>","text":"<p>Remove directories in the <code>dirs</code> list in the <code>paths</code> list.</p>"},{"location":"api/#thutil.path.copy_file","title":"<code>copy_file(src_path: str, dest_path: str)</code>","text":"<p>Copy a file/folder from the source path to the destination path.</p>"},{"location":"api/#thutil.path.move_file","title":"<code>move_file(src_path: str, dest_path: str)</code>","text":"<p>Move a file/folder from the source path to the destination path.</p>"},{"location":"api/#thutil.path.scan_dirs","title":"<code>scan_dirs(dirs: list[str], with_files: list[str], without_files: list[str] = []) -&gt; list[str]</code>","text":"<p>Check if the folders contains and not contains some files.</p> <p>Parameters:</p> <ul> <li> <code>dirs</code>               (<code>list[str]</code>)           \u2013            <p>The paths of dirs to scan.</p> </li> <li> <code>with_files</code>               (<code>list[str]</code>)           \u2013            <p>The files that should exist in the path.</p> </li> <li> <code>without_files</code>               (<code>list[str]</code>, default:                   <code>[]</code> )           \u2013            <p>The files that should not exist in the work_dir. Defaults to [].</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list[str]: The paths that meet the conditions.</p> </li> </ul>"},{"location":"api/#thutil.pkg","title":"<code>pkg</code>","text":"<p>Functions:</p> <ul> <li> <code>create_logger</code>             \u2013              <p>Create and configure a logger with console and optional file handlers.</p> </li> <li> <code>check_package</code>             \u2013              <p>Check if the required packages are installed</p> </li> <li> <code>get_func_args</code>             \u2013              <p>Get the arguments of a function</p> </li> <li> <code>dependency_info</code>             \u2013              <p>Get the dependency information</p> </li> </ul>"},{"location":"api/#thutil.pkg.create_logger","title":"<code>create_logger(logger_name: str = None, log_file: str = None, level: str = 'INFO', level_logfile: str = None, format_: str = 'info') -&gt; logging.Logger</code>","text":"<p>Create and configure a logger with console and optional file handlers.</p>"},{"location":"api/#thutil.pkg.check_package","title":"<code>check_package(package_name: str, git_repo: str = None, auto_install: bool = False, extra_commands: list[str] = None) -&gt; None</code>","text":"<p>Check if the required packages are installed</p>"},{"location":"api/#thutil.pkg._install_package","title":"<code>_install_package(package_name: str, git_repo: str = None) -&gt; None</code>","text":"<p>Install the required package</p> <pre><code>package_name (str): package name\ngit_repo (str): git path for the package\n</code></pre>"},{"location":"api/#thutil.pkg.get_func_args","title":"<code>get_func_args(func)</code>","text":"<p>Get the arguments of a function</p>"},{"location":"api/#thutil.pkg.dependency_info","title":"<code>dependency_info(modules=['numpy', 'polars', 'thutil', 'ase']) -&gt; str</code>","text":"<p>Get the dependency information</p>"},{"location":"api/#thutil.sth2sth","title":"<code>sth2sth</code>","text":"<p>Functions:</p> <ul> <li> <code>file2str</code>             \u2013              </li> <li> <code>str2file</code>             \u2013              </li> <li> <code>file2list</code>             \u2013              </li> <li> <code>list2file</code>             \u2013              </li> <li> <code>float2str</code>             \u2013              <p>convert float number to str</p> </li> </ul>"},{"location":"api/#thutil.sth2sth.file2str","title":"<code>file2str(file_path: Union[str, Path]) -&gt; str</code>","text":""},{"location":"api/#thutil.sth2sth.str2file","title":"<code>str2file(text: str, file_path: Union[str, Path]) -&gt; None</code>","text":""},{"location":"api/#thutil.sth2sth.file2list","title":"<code>file2list(file_path: Union[str, Path]) -&gt; list[str]</code>","text":""},{"location":"api/#thutil.sth2sth.list2file","title":"<code>list2file(text_list: list, file_path: Union[str, Path]) -&gt; None</code>","text":""},{"location":"api/#thutil.sth2sth.float2str","title":"<code>float2str(floatnum, decimals=6)</code>","text":"<p>convert float number to str REF: https://stackoverflow.com/questions/2440692/formatting-floats-without-trailing-zeros</p> <p>Parameters:</p> <ul> <li> <code>floatnum</code>               (<code>float</code>)           \u2013            <p>float number</p> </li> <li> <code>fmt</code>               (<code>str</code>)           \u2013            <p>format of the output string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>s</code> (              <code>str</code> )          \u2013            <p>string of the float number</p> </li> </ul>"},{"location":"api/#thutil.stuff","title":"<code>stuff</code>","text":"<p>Functions:</p> <ul> <li> <code>chunk_list</code>             \u2013              <p>Yield successive n-sized chunks from <code>input_list</code>.</p> </li> <li> <code>fill_text_center</code>             \u2013              <p>Create a line with centered text.</p> </li> <li> <code>fill_text_left</code>             \u2013              <p>Create a line with left-aligned text.</p> </li> <li> <code>fill_text_box</code>             \u2013              <p>Put the string at the center of |  |.</p> </li> </ul>"},{"location":"api/#thutil.stuff.chunk_list","title":"<code>chunk_list(input_list: list, n: int) -&gt; Generator</code>","text":"<p>Yield successive n-sized chunks from <code>input_list</code>.</p>"},{"location":"api/#thutil.stuff.fill_text_center","title":"<code>fill_text_center(input_text='example', fill='-', max_length=60)</code>","text":"<p>Create a line with centered text.</p>"},{"location":"api/#thutil.stuff.fill_text_left","title":"<code>fill_text_left(input_text='example', left_margin=15, fill='-', max_length=60)</code>","text":"<p>Create a line with left-aligned text.</p>"},{"location":"api/#thutil.stuff.fill_text_box","title":"<code>fill_text_box(input_text='', fill=' ', sp='|', max_length=60)</code>","text":"<p>Put the string at the center of |  |.</p>"},{"location":"config/","title":"config","text":""},{"location":"config/#thutil.config","title":"<code>thutil.config</code>","text":"<p>Functions:</p> <ul> <li> <code>validate_config</code>             \u2013              <p>Validate the config file with the schema file.</p> </li> <li> <code>load_setting_file</code>             \u2013              <p>Load data from a JSON or YAML file.</p> </li> <li> <code>load_jsonc</code>             \u2013              <p>Load data from a JSON file that allow comments.</p> </li> <li> <code>unpack_dict</code>             \u2013              <p>Unpack one level of nested dictionary.</p> </li> <li> <code>write_yaml</code>             \u2013              <p>Write data to a YAML file.</p> </li> <li> <code>read_yaml</code>             \u2013              <p>Read data from a YAML file.</p> </li> </ul>"},{"location":"config/#thutil.config.validate_config","title":"<code>validate_config(config_dict=None, config_file=None, schema_dict=None, schema_file=None, allow_unknown=False, require_all=False)</code>","text":"<p>Validate the config file with the schema file.</p> <p>Parameters:</p> <ul> <li> <code>config_dict</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>config dictionary. Defaults to None.</p> </li> <li> <code>config_file</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>path to the YAML config file, will override <code>config_dict</code>. Defaults to None.</p> </li> <li> <code>schema_dict</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>schema dictionary. Defaults to None.</p> </li> <li> <code>schema_file</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>path to the YAML schema file, will override <code>schema_dict</code>. Defaults to None.</p> </li> <li> <code>allow_unknown</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>whether to allow unknown fields in the config file. Defaults to False.</p> </li> <li> <code>require_all</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>whether to require all fields in the schema file to be present in the config file. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>if the config file does not match the schema</p> </li> </ul>"},{"location":"config/#thutil.config.load_setting_file","title":"<code>load_setting_file(filename: Union[str, Path]) -&gt; dict</code>","text":"<p>Load data from a JSON or YAML file.</p>"},{"location":"config/#thutil.config.load_setting_file--parameters","title":"Parameters","text":"<p>filename : str or os.PathLike     The filename to load data from, whose suffix should be .json, .yaml, or .yml</p>"},{"location":"config/#thutil.config.load_setting_file--returns","title":"Returns","text":"<p>dict     jdata: (dict) The data loaded from the file</p>"},{"location":"config/#thutil.config.load_setting_file--raises","title":"Raises","text":"<p>ValueError     If the file format is not supported</p>"},{"location":"config/#thutil.config.load_jsonc","title":"<code>load_jsonc(filename: str) -&gt; dict</code>","text":"<p>Load data from a JSON file that allow comments.</p>"},{"location":"config/#thutil.config.unpack_dict","title":"<code>unpack_dict(nested_dict: dict) -&gt; dict</code>","text":"<p>Unpack one level of nested dictionary.</p>"},{"location":"config/#thutil.config.write_yaml","title":"<code>write_yaml(jdata: dict, filename: Union[str, Path])</code>","text":"<p>Write data to a YAML file.</p>"},{"location":"config/#thutil.config.read_yaml","title":"<code>read_yaml(filename: Union[str, Path]) -&gt; dict</code>","text":"<p>Read data from a YAML file.</p>"},{"location":"io/","title":"io","text":""},{"location":"io/#thutil.io","title":"<code>thutil.io</code>","text":"<p>Functions:</p> <ul> <li> <code>combine_text_files</code>             \u2013              <p>Combine text files into a single file in a memory-efficient. Read and write in chunks to avoid loading large files into memory</p> </li> <li> <code>download_rawtext</code>             \u2013              <p>Download raw text from a URL.</p> </li> </ul>"},{"location":"io/#thutil.io.combine_text_files","title":"<code>combine_text_files(files: list[str], output_file: str, chunk_size: int = 1024)</code>","text":"<p>Combine text files into a single file in a memory-efficient. Read and write in chunks to avoid loading large files into memory</p> <p>Parameters:</p> <ul> <li> <code>files</code>               (<code>list[str]</code>)           \u2013            <p>List of file paths to combine.</p> </li> <li> <code>output_file</code>               (<code>str</code>)           \u2013            <p>Path to the output file.</p> </li> <li> <code>chunk_size</code>               (<code>int</code>, default:                   <code>1024</code> )           \u2013            <p>Size of each chunk in KB to read/write. Defaults to 1024 KB.</p> </li> </ul>"},{"location":"io/#thutil.io.download_rawtext","title":"<code>download_rawtext(url: str, outfile: str = None) -&gt; str</code>","text":"<p>Download raw text from a URL.</p>"},{"location":"path/","title":"path","text":""},{"location":"path/#thutil.path","title":"<code>thutil.path</code>","text":"<p>Functions:</p> <ul> <li> <code>make_dir</code>             \u2013              <p>Create a directory with a backup option.</p> </li> <li> <code>make_dir_ask_backup</code>             \u2013              <p>Make a directory and ask for backup if the directory already exists.</p> </li> <li> <code>ask_yes_no</code>             \u2013              <p>Asks a yes/no/backup question and returns the response.</p> </li> <li> <code>list_paths</code>             \u2013              <p>List all files/folders in given directories and their subdirectories that match the given patterns.</p> </li> <li> <code>collect_files</code>             \u2013              <p>Collect files from a list of paths (files/folders). Will search files in folders and their subdirectories.</p> </li> <li> <code>change_pathname</code>             \u2013              <p>change path names</p> </li> <li> <code>remove_files</code>             \u2013              <p>Remove files from a given list of file paths.</p> </li> <li> <code>remove_dirs</code>             \u2013              <p>Remove a list of directories.</p> </li> <li> <code>remove_files_in_paths</code>             \u2013              <p>Remove files in the <code>files</code> list in the <code>paths</code> list.</p> </li> <li> <code>remove_dirs_in_paths</code>             \u2013              <p>Remove directories in the <code>dirs</code> list in the <code>paths</code> list.</p> </li> <li> <code>copy_file</code>             \u2013              <p>Copy a file/folder from the source path to the destination path.</p> </li> <li> <code>move_file</code>             \u2013              <p>Move a file/folder from the source path to the destination path.</p> </li> <li> <code>scan_dirs</code>             \u2013              <p>Check if the folders contains and not contains some files.</p> </li> </ul>"},{"location":"path/#thutil.path.make_dir","title":"<code>make_dir(path: str, backup: bool = True)</code>","text":"<p>Create a directory with a backup option.</p>"},{"location":"path/#thutil.path.make_dir_ask_backup","title":"<code>make_dir_ask_backup(dir_path: str)</code>","text":"<p>Make a directory and ask for backup if the directory already exists.</p>"},{"location":"path/#thutil.path.ask_yes_no","title":"<code>ask_yes_no(question: str) -&gt; str</code>","text":"<p>Asks a yes/no/backup question and returns the response.</p>"},{"location":"path/#thutil.path.list_paths","title":"<code>list_paths(paths: list[str], patterns: list[str], recursive=True) -&gt; list[str]</code>","text":"<p>List all files/folders in given directories and their subdirectories that match the given patterns.</p>"},{"location":"path/#thutil.path.list_paths--parameters","title":"Parameters","text":"<p>paths : list[str]     The list of paths to search files/folders. patterns : list[str]     The list of patterns to apply to the files. Each filter can be a file extension or a pattern.</p>"},{"location":"path/#thutil.path.list_paths--returns","title":"Returns:","text":"<p>List[str]: A list of matching paths.</p>"},{"location":"path/#thutil.path.list_paths--example","title":"Example:","text":"<pre><code>folders = [\"path1\", \"path2\", \"path3\"]\npatterns = [\"*.ext1\", \"*.ext2\", \"something*.ext3\", \"*folder/\"]\nfiles = list_files_in_dirs(folders, patterns)\n</code></pre>"},{"location":"path/#thutil.path.list_paths--note","title":"Note:","text":"<ul> <li>glob() does not list hidden files by default. To include hidden files, use glob(\".*\", recursive=True).</li> <li>When use recursive=True, must include <code>**</code> in the pattern to search subdirectories.<ul> <li>glob(\"*\", recursive=True) will search all FILES &amp; FOLDERS in the CURRENT directory.</li> <li>glob(\"*/\", recursive=True) will search all FOLDERS in the current CURRENT directory.</li> <li>glob(\"**\", recursive=True) will search all FILES &amp; FOLDERS in the CURRENT &amp; SUB subdirectories.</li> <li>glob(\"**/\", recursive=True) will search all FOLDERS in the current CURRENT &amp; SUB subdirectories.</li> <li>\"/*\" is equivalent to \"\".</li> <li>\"/*/\" is equivalent to \"/\".</li> </ul> </li> <li>IMPORTANT: \"/\" will replicate the behavior of \"**\", then give unexpected results.</li> </ul>"},{"location":"path/#thutil.path.collect_files","title":"<code>collect_files(paths: list[str], patterns: list[str]) -&gt; list[str]</code>","text":"<p>Collect files from a list of paths (files/folders). Will search files in folders and their subdirectories.</p>"},{"location":"path/#thutil.path.collect_files--parameters","title":"Parameters","text":"<p>paths : list[str]     The list of paths to collect files from. patterns : list[str]     The list of patterns to apply to the files. Each filter can be a file extension or a pattern.</p>"},{"location":"path/#thutil.path.collect_files--returns","title":"Returns:","text":"<p>List[str]: A list of paths matching files.</p>"},{"location":"path/#thutil.path.change_pathname","title":"<code>change_pathname(paths: list[str], old_string: str, new_string: str, replace: bool = False) -&gt; None</code>","text":"<p>change path names</p> <p>Parameters:</p> <ul> <li> <code>paths</code>               (<code>list[str]</code>)           \u2013            <p>paths to the files/dirs</p> </li> <li> <code>old_string</code>               (<code>str</code>)           \u2013            <p>old string in path name</p> </li> <li> <code>new_string</code>               (<code>str</code>)           \u2013            <p>new string in path name</p> </li> <li> <code>replace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>replace the old path name if the new one exists. Defaults to False.</p> </li> </ul>"},{"location":"path/#thutil.path.remove_files","title":"<code>remove_files(files: list[str]) -&gt; None</code>","text":"<p>Remove files from a given list of file paths.</p> <p>Parameters:</p> <ul> <li> <code>files</code>               (<code>list[str]</code>)           \u2013            <p>list of file paths</p> </li> </ul>"},{"location":"path/#thutil.path.remove_dirs","title":"<code>remove_dirs(dirs: list[str]) -&gt; None</code>","text":"<p>Remove a list of directories.</p> <p>Parameters:</p> <ul> <li> <code>dirs</code>               (<code>list[str]</code>)           \u2013            <p>list of directories to remove.</p> </li> </ul>"},{"location":"path/#thutil.path.remove_files_in_paths","title":"<code>remove_files_in_paths(files: list, paths: list) -&gt; None</code>","text":"<p>Remove files in the <code>files</code> list in the <code>paths</code> list.</p>"},{"location":"path/#thutil.path.remove_dirs_in_paths","title":"<code>remove_dirs_in_paths(dirs: list, paths: list) -&gt; None</code>","text":"<p>Remove directories in the <code>dirs</code> list in the <code>paths</code> list.</p>"},{"location":"path/#thutil.path.copy_file","title":"<code>copy_file(src_path: str, dest_path: str)</code>","text":"<p>Copy a file/folder from the source path to the destination path.</p>"},{"location":"path/#thutil.path.move_file","title":"<code>move_file(src_path: str, dest_path: str)</code>","text":"<p>Move a file/folder from the source path to the destination path.</p>"},{"location":"path/#thutil.path.scan_dirs","title":"<code>scan_dirs(dirs: list[str], with_files: list[str], without_files: list[str] = []) -&gt; list[str]</code>","text":"<p>Check if the folders contains and not contains some files.</p> <p>Parameters:</p> <ul> <li> <code>dirs</code>               (<code>list[str]</code>)           \u2013            <p>The paths of dirs to scan.</p> </li> <li> <code>with_files</code>               (<code>list[str]</code>)           \u2013            <p>The files that should exist in the path.</p> </li> <li> <code>without_files</code>               (<code>list[str]</code>, default:                   <code>[]</code> )           \u2013            <p>The files that should not exist in the work_dir. Defaults to [].</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>list[str]: The paths that meet the conditions.</p> </li> </ul>"},{"location":"pkg/","title":"pkg","text":""},{"location":"pkg/#thutil.pkg","title":"<code>thutil.pkg</code>","text":"<p>Functions:</p> <ul> <li> <code>create_logger</code>             \u2013              <p>Create and configure a logger with console and optional file handlers.</p> </li> <li> <code>check_package</code>             \u2013              <p>Check if the required packages are installed</p> </li> <li> <code>get_func_args</code>             \u2013              <p>Get the arguments of a function</p> </li> <li> <code>dependency_info</code>             \u2013              <p>Get the dependency information</p> </li> </ul>"},{"location":"pkg/#thutil.pkg.create_logger","title":"<code>create_logger(logger_name: str = None, log_file: str = None, level: str = 'INFO', level_logfile: str = None, format_: str = 'info') -&gt; logging.Logger</code>","text":"<p>Create and configure a logger with console and optional file handlers.</p>"},{"location":"pkg/#thutil.pkg.check_package","title":"<code>check_package(package_name: str, git_repo: str = None, auto_install: bool = False, extra_commands: list[str] = None) -&gt; None</code>","text":"<p>Check if the required packages are installed</p>"},{"location":"pkg/#thutil.pkg.get_func_args","title":"<code>get_func_args(func)</code>","text":"<p>Get the arguments of a function</p>"},{"location":"pkg/#thutil.pkg.dependency_info","title":"<code>dependency_info(modules=['numpy', 'polars', 'thutil', 'ase']) -&gt; str</code>","text":"<p>Get the dependency information</p>"},{"location":"sth2sth/","title":"sth2sth","text":""},{"location":"sth2sth/#thutil.sth2sth","title":"<code>thutil.sth2sth</code>","text":"<p>Functions:</p> <ul> <li> <code>file2str</code>             \u2013              </li> <li> <code>str2file</code>             \u2013              </li> <li> <code>file2list</code>             \u2013              </li> <li> <code>list2file</code>             \u2013              </li> <li> <code>float2str</code>             \u2013              <p>convert float number to str</p> </li> </ul>"},{"location":"sth2sth/#thutil.sth2sth.file2str","title":"<code>file2str(file_path: Union[str, Path]) -&gt; str</code>","text":""},{"location":"sth2sth/#thutil.sth2sth.str2file","title":"<code>str2file(text: str, file_path: Union[str, Path]) -&gt; None</code>","text":""},{"location":"sth2sth/#thutil.sth2sth.file2list","title":"<code>file2list(file_path: Union[str, Path]) -&gt; list[str]</code>","text":""},{"location":"sth2sth/#thutil.sth2sth.list2file","title":"<code>list2file(text_list: list, file_path: Union[str, Path]) -&gt; None</code>","text":""},{"location":"sth2sth/#thutil.sth2sth.float2str","title":"<code>float2str(floatnum, decimals=6)</code>","text":"<p>convert float number to str REF: https://stackoverflow.com/questions/2440692/formatting-floats-without-trailing-zeros</p> <p>Parameters:</p> <ul> <li> <code>floatnum</code>               (<code>float</code>)           \u2013            <p>float number</p> </li> <li> <code>fmt</code>               (<code>str</code>)           \u2013            <p>format of the output string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>s</code> (              <code>str</code> )          \u2013            <p>string of the float number</p> </li> </ul>"}]}